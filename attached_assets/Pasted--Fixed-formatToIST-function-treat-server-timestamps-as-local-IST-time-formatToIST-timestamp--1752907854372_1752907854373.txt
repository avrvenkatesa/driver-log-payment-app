// Fixed formatToIST function - treat server timestamps as local IST time
formatToIST(timestamp) {
    if (!timestamp) return null;
    
    try {
        // Since your server sends IST timestamps in format "2025-07-19 06:46:56"
        // and your browser is in IST timezone, treat them as local time
        const date = new Date(timestamp);
        
        // Check if the date is valid
        if (isNaN(date.getTime())) {
            console.error('Invalid timestamp:', timestamp);
            return 'Invalid Date';
        }
        
        // Format as IST (no timezone conversion needed)
        const formatter = new Intl.DateTimeFormat('en-IN', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false
        });
        
        return formatter.format(date);
        
    } catch (error) {
        console.error('Error formatting date:', error, timestamp);
        return 'Error formatting date';
    }
}

// Updated loadDriverStatus with consistent time handling
async loadDriverStatus() {
    try {
        const response = await fetch('/api/driver/status', {
            headers: { 'Authorization': `Bearer ${this.token}` }
        });

        const data = await response.json();
        const statusDiv = document.getElementById('shift-status');

        if (data.hasActiveShift) {
            const shift = data.activeShift;
            
            // Debug logging
            console.log('Server timestamp:', shift.clock_in_time);
            
            const clockInTime = this.formatToIST(shift.clock_in_time);
            
            // Calculate how long the shift has been running
            let shiftDuration = '';
            try {
                // Parse the timestamp as local time (IST)
                const startTime = new Date(shift.clock_in_time);
                const now = new Date();
                
                console.log('Start time parsed:', startTime.toLocaleString());
                console.log('Current time:', now.toLocaleString());
                
                const diffMs = now - startTime;
                console.log('Difference in milliseconds:', diffMs);
                
                if (diffMs < 0) {
                    shiftDuration = '(just started)';
                } else {
                    const totalMinutes = Math.floor(diffMs / (1000 * 60));
                    const hours = Math.floor(totalMinutes / 60);
                    const minutes = totalMinutes % 60;
                    
                    console.log('Total minutes:', totalMinutes, 'Hours:', hours, 'Minutes:', minutes);
                    
                    if (hours > 0) {
                        shiftDuration = `(${hours}h ${minutes}m ago)`;
                    } else {
                        shiftDuration = `(${minutes}m ago)`;
                    }
                }
            } catch (e) {
                console.error('Error calculating duration:', e);
                shiftDuration = '(calculation error)';
            }
            
            statusDiv.innerHTML = `
                <div class="active-shift">
                    <p><strong>${this.translator.t('currentlyOnShift')}</strong></p>
                    <p>${this.translator.t('started')}: ${clockInTime} ${shiftDuration}</p>
                    <p>${this.translator.t('startOdometer')}: ${shift.start_odometer} ${this.translator.t('km')}</p>
                </div>
            `;
            document.getElementById('clock-in-btn').disabled = true;
            document.getElementById('clock-out-btn').disabled = false;
        } else {
            statusDiv.innerHTML = `
                <div class="no-shift">
                    <p><strong>${this.translator.t('notOnShift')}</strong></p>
                    <p>${this.translator.t('readyForNewShift')}</p>
                </div>
            `;
            document.getElementById('clock-in-btn').disabled = false;
            document.getElementById('clock-out-btn').disabled = true;
        }
    } catch (error) {
        this.showMessage(this.translator.t('failedToLoadShiftStatus'), 'error');
    }
}